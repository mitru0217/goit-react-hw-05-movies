{"version":3,"file":"static/js/473.02c3c1bc.chunk.js","mappings":"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","sources":["Api.jsx","components/Moviecard.jsx","components/styledComponents/MoviesItem.syled.js","components/styledComponents/MoviesList.syled.js","pages/StyledPages/Movies.styled.js","components/styledComponents/SearchForm.styled.js","pages/Movies.jsx","pages/StyledPages/Home.styled.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '38f6f2c88436f6a6fb5d137cfc7b2688';\nconst BASE_URL = 'api.themoviedb.org/3/';\n\nexport const GetTrendingMovies = async () => {\n  const response = await axios.get(\n    `https://${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const MovieById = async id => {\n  const response = await axios.get(\n    `https://${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response;\n};\n\n// export const GetMoviesByQuery = async (page, query) => {\n//   const response = await axios.get(\n//     `https://${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`\n//   );\n//   return response;\n// };\n\nexport const GetMoviesByQuery = async query => {\n  const response = await axios.get(\n    `https://${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&include_adult=false&query=${query}`\n  );\n  return response;\n};\n\nexport const GetMovieCast = async id => {\n  const response = await axios.get(\n    `https://${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const GetMovieReview = async id => {\n  const response = await axios.get(\n    `https://${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n","import ImgNotFound from '../Images/—Pngtree—image of video camera vector_5274660.png';\nimport { ItemImg } from './styledComponents/MoviesItem.syled';\n\nexport const MovieCard = ({ title, poster, releaseDate }) => {\n  return (\n    <>\n      <ItemImg\n        src={poster ? `https://image.tmdb.org/t/p/w500/${poster}` : ImgNotFound}\n        alt={title}\n      />\n      {title}({releaseDate ? releaseDate.split('-')[0] : ''})\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const MoviesItem = styled.li`\n  margin: 0;\n\n  list-style: none;\n  text-decoration: none;\n  color: black;\n  flex-basis: calc(100% / 5 - 15px);\n  border: 1px solid #eee;\n  margin-left: 15px;\n  margin-top: 15px;\n  border: none;\n\n  /* background-color: ${p => p.theme.colors.background.movieItems}; */\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.05);\n  }\n`;\nexport const ItemImg = styled.img`\n  display: block;\n  width: 100%;\n\n  object-fit: cover;\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 100%;\n  height: auto;\n  padding: 20px;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n  height: auto;\n`;\n\nexport const Span = styled.span`\n  display: inline-block;\n  margin: 0 auto;\n  margin-top: 40px;\n  font-size: 30px;\n  font-weight: bold;\n  color: red;\n`;\n\nexport const Loading = styled.div`\n  margin: 0, auto;\n`;\n\nexport const Warning = styled.h2`\n  color: red;\n`;\nexport const InValidQuery = styled.span`\n  color: blue;\n  text-decoration-style: solid;\n`;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100px;\n  background-color: #0080ff;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n`;\nexport const Input = styled.input`\n  margin: 0;\n  padding: 0;\n  height: 50px;\n  border: none;\n  border-top-right-radius: 15px;\n  border-bottom-right-radius: 15px;\n  outline: none;\n  font-size: 25px;\n  padding-left: 10px;\n  padding-right: 10px;\n`;\nexport const Button = styled.button`\n  margin: 0;\n  padding: 0;\n  width: 50px;\n  height: 50px;\n  border: none;\n  border-top-left-radius: 15px;\n  border-bottom-left-radius: 15px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { ErrorMessage } from 'pages/StyledPages/Home.styled';\nimport {\n  Span,\n  Loading,\n  Warning,\n  InValidQuery,\n} from 'pages/StyledPages/Movies.styled';\nimport { List } from 'components/styledComponents/MoviesList.syled';\nimport { MoviesItem } from 'components/styledComponents/MoviesItem.syled';\nimport { MovieCard } from 'components/Moviecard';\nimport { GetMoviesByQuery } from '../Api';\n\nimport toast, { Toaster } from 'react-hot-toast';\nimport { FaSearch } from 'react-icons/fa';\nimport {\n  Header,\n  Input,\n  Button,\n  Form,\n} from 'components/styledComponents/SearchForm.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (query === '') {\n      toast.error('Nothing to show yet. Enter your requst.', {\n        duration: 1000,\n      });\n    }\n    const form = e.currentTarget;\n    setSearchParams(form !== '' ? { query: form.elements.query.value } : {});\n    form.reset();\n    try {\n      setLoading(true);\n      setMovies([]);\n      const response = await GetMoviesByQuery(query);\n      const MoviesByQuery = response.data.results;\n      setMovies([...MoviesByQuery]);\n      setError('');\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    const loadMovies = async () => {\n      try {\n        setLoading(true);\n        setMovies([]);\n        const response = await GetMoviesByQuery(query);\n        const MoviesByQuery = response.data.results;\n        setMovies([...MoviesByQuery]);\n        setError('');\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadMovies();\n    return () => {};\n  }, [query]);\n\n  return (\n    <main>\n      <Header>\n        <Form onSubmit={e => onSubmit(e)}>\n          <Button type=\"submit\">\n            <FaSearch size={25} />\n          </Button>\n          <Input\n            type=\"text\"\n            autocomplete=\"off\"\n            name=\"query\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n        </Form>\n        <Toaster />\n      </Header>\n      {movies.length === 0 && query && (\n        <Warning>\n          There are no images for query:\n          <InValidQuery> {query}</InValidQuery>\n        </Warning>\n      )}\n\n      {loading && (\n        <Loading>\n          <RotatingLines strokeColor=\"blue\" />\n        </Loading>\n      )}\n      {error && movies.length !== 0 && (\n        <ErrorMessage>Error while loading data. Try again later.</ErrorMessage>\n      )}\n      {!query ? (\n        <Span>'While there is nothing to show'</Span>\n      ) : (\n        <List>\n          {movies &&\n            movies.map(movie => (\n              <MoviesItem key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  <MovieCard\n                    key={movie.id}\n                    title={movie.original_title}\n                    poster={movie.poster_path}\n                    releaseDate={movie.release_date}\n                  />\n                </Link>\n              </MoviesItem>\n            ))}\n        </List>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\n\nexport const Loading = styled.div`\n  margin: 0, auto;\n`;\nexport const HomeTitle = styled.h1`\n  color: ${p => p.theme.colors.title};\n`;\nexport const ErrorMessage = styled.h2`\n  color: ${p => p.theme.colors.error};\n`;\n"],"names":["API_KEY","BASE_URL","GetTrendingMovies","axios","response","MovieById","id","GetMoviesByQuery","query","GetMovieCast","GetMovieReview","MovieCard","title","poster","releaseDate","src","ImgNotFound","alt","split","MoviesItem","styled","p","theme","colors","background","movieItems","ItemImg","List","Span","Loading","Warning","InValidQuery","Header","Form","Input","Button","useState","movies","setMovies","loading","setLoading","error","setError","location","useLocation","useSearchParams","searchParams","setSearchParams","get","onSubmit","e","preventDefault","toast","duration","form","currentTarget","elements","value","reset","MoviesByQuery","data","results","useEffect","loadMovies","type","size","autocomplete","name","autoFocus","placeholder","length","strokeColor","map","movie","to","state","from","original_title","poster_path","release_date","HomeTitle","ErrorMessage"],"sourceRoot":""}